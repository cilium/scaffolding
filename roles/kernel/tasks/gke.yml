---
- block:

  - name: Set kubeconfig
    set_fact:
      kubeconfig: "{{archive_dir}}/kubeconfig"
    when: kubeconfig|length < 1

  - name: Capture nodes
    shell: |
     export KUBECONFIG={{kubeconfig}}
     kubectl get nodes --no-headers -o custom-columns=:.metadata.name
    register: node_list

  - name: Create CM
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl apply -f {{ role_path }}/files/cm-kernel.yaml

  - name: Create DS
    shell: |
      export KUBECONFIG={{kubeconfig}}
      export KERNEL_VERSION={{kernel}}
      envsubst < {{ role_path }}/files/ds-kernel.yaml | kubectl apply -f -

  - name: Check on the rollout
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl rollout status ds/node-initializer

  # Assumption we are logged into the account, might need to add login method to use gcloud cli
  - name: Restart GKE nodes
    shell: |
      export GOOGLE_APPLICATION_CREDENTIALS={{ gke['sa_file']}}
      gcloud auth activate-service-account $(jq -r .client_email {{ gke['sa_file'] }}) --key-file={{ gke['sa_file'] }} --project $(jq -r .project_id {{ gke['sa_file'] }})
      yes | gcloud config set project {{ gke['project'] }}
      gcloud compute instances reset --zone {{ gke['region'] }} {{ item }}
    loop: "{{ node_list.stdout_lines }}"

  - name: Delete DS
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl delete ds/node-initializer

  - name: Pause for 1 minute for vms to reboot
    pause:
      minutes: 1

  - name: Check node status
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl wait --for=condition=Ready nodes --all --timeout=1200s
  
  - name: Ensure kernel versions match
    shell: |
      set -eo pipefail
      export KUBECONFIG={{kubeconfig}}
      kernels=$(kubectl get nodes -o go-template --template {% raw %}'{{range .items}}{{.status.nodeInfo.kernelVersion}}{{" "}}{{end}}'{% endraw %})
      echo "Looking for matches on {{ kernel }}"
      for kernel in $kernels
      do
          if [[ $kernel != {{ kernel }}* ]]
          then
              echo "Did not match: $kernel"
              exit 1
          else
              echo "Matched: $kernel"
          fi
      done

 
  when: kernel | length > 1