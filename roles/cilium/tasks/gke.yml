---

- name: Set kubeconfig
  set_fact:
    kubeconfig: "{{archive_dir}}/kubeconfig"
  when: kubeconfig|length < 1

- name: Check if specific cilium-cli version is downloaded
  shell: |
    {{archive_dir}}/cilium version | head -n 1 | grep '{{cilium_cli_version}}'
  register: cilium_cli_install
  ignore_errors: true

- name: Pull specific cilium-cli version
  shell: |
      curl -sSL --remote-name-all https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-amd64.tar.gz
      tar xzvfC cilium-linux-amd64.tar.gz {{archive_dir}}
      rm cilium-linux-amd64.tar.gz
      export KUBECONFIG={{kubeconfig}}
      {{archive_dir}}/cilium version
  when: cilium_cli_install.rc != 0

- name: Check if Cilium is installed
  shell: |
    export KUBECONFIG={{kubeconfig}}
    {{archive_dir}}/cilium status --wait --wait-duration=5s
  register: cilium_install
  ignore_errors: true

- name: Store Cilium version
  copy:
    content: "{{cilium_version}}"
    dest: "{{archive_dir}}/cilium_version"

- name: Store Cilium-cli version
  copy:
    content: "{{cilium_cli_version}}"
    dest: "{{archive_dir}}/cilium_version-cli"

- name: Get Cluster IPv4 CIDR
  shell: |
    export KUBECONFIG={{kubeconfig}}
    # 'kubectl cluster-info dump' gives:
    # <junk>--cluster-cidr=x.y.z.a\bc<junk>
    kubectl cluster-info dump | \
      grep -m 1 -o -E -- '--cluster-cidr=[0-9./]+' | \
      cut -d'=' -f2
  register: cluster_ipv4_cidr
  failed_when:
    - cluster_ipv4_cidr.rc != 0
    - cluster_ipv4_cidr.stdout == ""
    - cluster_ipv4_cidr.stdout is not regex("^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{2}$")

- name: Install using Cilium cli
  shell: |
      export KUBECONFIG={{kubeconfig}}
      {{archive_dir}}/cilium install --version {{cilium_version}} --ipv4-native-routing-cidr="{{cluster_ipv4_cidr.stdout}}" {{cilium_install_params}}
  when: cilium_install.rc != 0