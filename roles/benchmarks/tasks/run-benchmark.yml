---
- name: Launch benchmarks
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl create -f {{ archive_dir }}/{{item.file}}

- name: Wait for benchmark to complete
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get benchmark/{{item.name}} -n benchmark-operator -o jsonpath="{.status.complete}"
  register: complete
  until: complete.stdout == "true"
  retries: 500
  ignore_errors: true
  delay: 60

# We will make the assumption the user did not change the name of the benchmark
- name: Check benchmark state
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get benchmark/{{item.name}} -n benchmark-operator -o jsonpath="{.status.state}"
  register: status

- set_fact:
    benchmark_state: "{{status.stdout}}"

- name: Store console log output
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl logs -n benchmark-operator $(kubectl get pods -n benchmark-operator -l benchmark-operator-role=client -o custom-columns=:.metadata.name --no-headers) > {{archive_dir}}/{{item.name}}.log
  ignore_errors: true #not all benchmarks set this label (we should fix this)

# We will make the assumption the user did not change the name of the benchmark
- name: Capture run uuid
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get benchmarks/{{item.name}} -n benchmark-operator --no-headers -o custom-columns=:.status.uuid | tee {{archive_dir}}/{{item.name}}-uuid
  register: uuid

- set_fact:
    benchmark_uuid: "{{ uuid.stdout }}"
    benchmark: "{{item.name}}"

- name: Check for uuid
  fail:
    msg: "UUID was not captured. Benchmark execution failed"
  when: uuid|length < 1

- name: Build metadata payload
  template:
    src: status.json.j2
    dest: "{{archive_dir}}/{{benchmark}}-payload.json"

- name: Send doc to ES
  uri:
    url: "{{es_url}}/{{scaffolding_index}}/_doc/"
    body: "{{ lookup('file', archive_dir + '/' + benchmark +'-payload.json') }}"
    method: POST
    status_code: 201
    body_format: json

# Consider using handler in the event it failed to complete, we clean up.
- fail:
    msg: "Benchmark failed to complete"
  when: benchmark_state != "Complete"

- name: Capture results
  shell: |
    cp {{ role_path }}/files/uperf.json {{archive_dir}}/
    touchstone_compare -url {{es_url}} --config {{archive_dir}}/{{item.report}} -u {{benchmark_uuid}} | tee {{archive_dir}}/{{item.name}}-result.out
  register: report

- debug:
    var: report.stdout

- name: Cleanup Run
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl delete benchmark/{{item.name}} -n benchmark-operator
  when: benchmark_cleanup | bool


- name: Cleanup kube-burner namespace
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl delete ns/pod-density-{{benchmark_uuid}}
  when: item.name == "agent-pod-density"