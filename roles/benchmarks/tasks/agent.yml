---
- name: Setup kubeconfig
  set_fact:
    kubeconfig: "{{archive_dir}}/kubeconfig"
  when: kubeconfig|length < 1

- name: Check for benchmark-operator
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get pods -n benchmark-operator --show-labels -l control-plane=controller-manager | grep controller-manager
  register: bmo

- block:
#  - name: Apply kube-burner SA
#    shell: |
#      export KUBECONFIG={{kubeconfig}}
#      kubectl apply -f {{archive_dir}}/bmo/resources/kube-burner-role.yml

  - name: Capture current pod count
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get pods -A --no-headers --field-selector status.phase=Running --no-headers | wc -l
    register: pod_count

  - name: Retrieve Platform type
    shell: |
      cat {{archive_dir}}/platform
    ignore_errors: true
    register: platform

  - name: Retrieve kernel
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get nodes -o wide -o jsonpath="{.items[0].status.nodeInfo.kernelVersion}" | tee {{archive_dir}}/kernel
    ignore_errors: true
    register: kernel_capture


  - name: Retrieve start time
    shell: |
      cat {{archive_dir}}/starttime
    ignore_errors: true
    register: start_time

  # Must set the test_kernel before referencing
  - set_fact:
      test_kernel: "{{ kernel_capture.stdout | default('test-kernel')}}"

  - set_fact:
      start_time: "{{ start_time.stdout | default('test-start')}}"
      test_platform: "{{ platform.stdout | default('test-platform')}}"
      run_id: "{{test_kernel}}-{{cilium_version}}"
      num_pods: "{{pod_count.stdout|int}}"

  # Doubtfully will work with OpenShift as they use openshift-monitoring
  - name: Retrieve Prometheus Server information
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get svc --namespace prometheus prometheus-server -o jsonpath="{.spec.clusterIP}:{.spec.ports[0].port}"
    register: prom_server

  - block:
    - name: Check for node labels
      shell: |
        export KUBECONFIG={{kubeconfig}}
        kubectl get nodes -o custom-columns=:.metadata.name --no-headers -l node-role.kubernetes.io/worker= | wc -l
      register: labeled_node_count

    - name: Store report generation json in archive_dir
      shell: |
        cp {{ role_path }}/files/pod-density.json {{archive_dir}}/

    - name: Label nodes
      shell: |
        export KUBECONFIG={{kubeconfig}}
        for node in `kubectl get nodes -o custom-columns=:.metadata.name --no-headers -l "{{tool_label.split(":")[0]}} notin ({{tool_label.split(":")[1]}})"`; do
          kubectl label node/$node node-role.kubernetes.io/worker=
        done
      when: labeled_node_count.stdout|int == 0

    - name: Retrieve number of nodes
      shell: |
        export KUBECONFIG={{kubeconfig}}
        kubectl get nodes -o custom-columns=:.metadata.name --no-headers -l node-role.kubernetes.io/worker= | wc -l
      ignore_errors: true
      register: node_count

    - set_fact:
        num_workers: "{{node_count.stdout|int}}"

    - set_fact:
        podDensity_uuid: "{{ (999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N'))) | to_uuid() | string }}"

    - set_fact:
        podDensity: "{{ podDensity|default([]) + [ {'file': 'agent-pod-density.yml.j2','name': 'agent-pod-density-'+item|string+'.yml','report': 'pod-density.json'} ] }}"
      loop: "{{ range(0, samples,1)|list }}"

    - name: Generate agent performance benchmarks
      template:
        src: "{{item.file}}"
        dest: "{{archive_dir}}/{{item.name}}"
      with_items: "{{ podDensity }}"

    - set_fact:
        podDensityBenchmarks: "{{ podDensityBenchmarks|default([]) + [ {'name': 'agent-pod-density', 'file': 'agent-pod-density-'+item|string+'.yml','report': 'pod-density.json'} ] }}"
      loop: "{{ range(0, samples,1)|list }}"

    - name: Run agent benchmarks
      include_tasks: run-benchmark.yml
      with_items: "{{ podDensityBenchmarks }}"

  when: bmo.rc == 0