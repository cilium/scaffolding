
---
- name: Setup kubeconfig
  set_fact:
    kubeconfig: "{{archive_dir}}/kubeconfig"
  when: kubeconfig|length < 1

- name: Check for benchmark-operator
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get pods -n benchmark-operator --show-labels -l control-plane=controller-manager | grep controller-manager
  register: bmo

- name: Retrieve Platform type
  shell: |
    cat {{archive_dir}}/platform
  ignore_errors: true
  register: platform

- set_fact:
    test_platform: "{{ platform.stdout | default('test-platform')}}"

- name: Retrieve kernel
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get nodes -o wide -o jsonpath="{.items[0].status.nodeInfo.kernelVersion}" | tee {{archive_dir}}/kernel
  ignore_errors: true
  register: kernel_capture

- set_fact:
    test_kernel: "{{ kernel_capture.stdout | default('test-kernel')}}"

- name: Retrieve start time
  shell: |
    cat {{archive_dir}}/starttime
  ignore_errors: true
  register: start_time

- set_fact:
    start_time: "{{ start_time.stdout | default('test-start')}}"

- set_fact:
    run_id: "{{test_kernel}}-{{cilium_version}}"

# Doubtfully will work with OpenShift as they use openshift-monitoring
- name: Retrieve Prometheus Server information
  shell: |
    export KUBECONFIG={{kubeconfig}}
    kubectl get svc --namespace prometheus prometheus-server -o jsonpath="{.spec.clusterIP}:{.spec.ports[0].port}"
  register: prom_server

- block:
  - name: Check for node labels
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get nodes -o custom-columns=:.metadata.name --no-headers -l node-role.kubernetes.io/worker= | wc -l
    register: labeled_node_count

  - name: Store report generation json in archive_dir
    shell: |
      cp {{ role_path }}/files/uperf.json {{archive_dir}}/

  - name: Label nodes
    shell: |
      export KUBECONFIG={{kubeconfig}}
      for node in `kubectl get nodes -o custom-columns=:.metadata.name --no-headers`; do
        kubectl label node/$node node-role.kubernetes.io/worker=
      done
    when: labeled_node_count.stdout|int == 0

  - name: Generate data-path performance benchmarks
    template:
      src: "{{item.file}}"
      dest: "{{archive_dir}}/{{item.name}}"
    with_items:
      - { file: datapath-uperf-stream-tcp.yml.j2, name: datapath-uperf-stream-tcp.yml}
      - { file: datapath-uperf-stream-udp.yml.j2, name: datapath-uperf-stream-udp.yml}
      - { file: datapath-uperf-rr.yml.j2, name: datapath-uperf-rr.yml }

  - name: Run datapath benchmarks
    include_tasks: run-benchmark.yml
    with_items:
      - {name: datapath-uperf-stream-tcp, file: datapath-uperf-stream-tcp.yml, report: uperf.json}
      - {name: datapath-uperf-stream-udp, file: datapath-uperf-stream-udp.yml, report: uperf.json}
      - {name: datapath-uperf-rr, file: datapath-uperf-rr.yml, report: uperf.json}

  when: bmo.rc == 0
