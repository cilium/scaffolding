---

- name: Setup kubeconfig
  set_fact:
    kubeconfig: "{{archive_dir}}/kubeconfig"
  when: kubeconfig|length < 1
  tags: prometheus,benchmark-operator,grafana

- block:
    - name : capture node count
      shell: |
        export KUBECONFIG={{kubeconfig}}
        kubectl get nodes -o custom-columns=:.metadata.name --no-headers | wc -l
      register: node_count

    - debug:
        msg: Node count is < 2, unable to isolate tools.
      when: node_count|int <= 2

    - name : Apply Scaffolding tool label to node
      shell: |
        export KUBECONFIG={{kubeconfig}}
        kubectl label node $(kubectl get nodes -o custom-columns=:.metadata.name --no-headers | head -n 1) {{tool_label|trim|replace(':','=')}} --overwrite
      register: labeled_node

    - debug:
        msg: "{{labeled_node}}"

  when: apply_tool_label | bool
  tags: prometheus,benchmark-operator
#
# Using Helm Install the community Parca Dev
# If Parca is already installed, skip
#
- block:
    - name: Add Parca Dev Helm Repo
      shell: |
        export KUBECONFIG={{kubeconfig}}
        helm repo add parca https://parca-dev.github.io/helm-charts/
        helm repo update

    - name: Generate parca values file
      template:
        src: parca-values.yml.j2
        dest: "{{archive_dir}}/parca-values.yml"

    - name: Check for existing install
      shell: |
        export KUBECONFIG={{kubeconfig}}
        helm status -n parca my-parca | grep deployed
      register: parca_install
      ignore_errors: true

    - name: Install ParcaDev
      shell: |
        export KUBECONFIG={{kubeconfig}}
        helm install my-parca parca/parca -n parca -f {{archive_dir}}/parca-values.yml --create-namespace
      when: parca_install.rc == 1

    - name: Check ParcaDev install
      shell: |
        export KUBECONFIG={{kubeconfig}}
        helm status -n parca my-parca | grep deployed
      when: parca_install.rc == 1
  tags: parcadev

#
# Using Helm Install the community Prometheus
# If Prometheus is already installed, skip
# If Install Prometheus, check for deployment
# -- Not Optional for CI, needed to capture metrics
#
- block:

  - name: Add Prometheus Helm Repo
    shell: |
      export KUBECONFIG={{kubeconfig}}
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo update

  - name: Generate values file
    template:
      src: values.yml.j2
      dest: "{{archive_dir}}/prom-values.yml"

  - name: Check for existing install
    shell: |
      export KUBECONFIG={{kubeconfig}}
      helm status -n prometheus prometheus | grep deployed
    register: prom_install
    ignore_errors: true

  - name: Install Prometheus
    shell: |
      export KUBECONFIG={{kubeconfig}}
      helm install prometheus prometheus-community/prometheus --namespace prometheus --namespace prometheus -f {{archive_dir}}/prom-values.yml --create-namespace
    when: apply_tool_label and prom_install.rc == 1

  - name: Check Prometheus install
    shell: |
      export KUBECONFIG={{kubeconfig}}
      helm status -n prometheus prometheus | grep deployed
    when: prom_install.rc == 1

  tags:
    - prometheus

#
# Install Benchmark Operator from helm chart in cloud-bulldozer/benchmark-operator
#
- block:

  - name: Check for existing install of Benchmark Operator
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get pods -A | grep benchmark-operator | wc -l
    register: bmo_install
    ignore_errors: true

  - name: Clean old install
    shell: |
      rm -rf {{archive_dir}}/bmo

  - name: Copy Benchmark Operator
    shell: |
      export KUBECONFIG={{kubeconfig}}
      git clone http://github.com/cloud-bulldozer/benchmark-operator/ {{archive_dir}}/bmo
    when: bmo_install.stdout|int == 0

  - name: Generate manager manifest file
    template:
      src: manager.yml.j2
      dest: "{{archive_dir}}/bmo/config/manager/manager.yaml"
    when: bmo_install.stdout|int == 0

  - name: Install Benchmark Operator
    shell: |
      export KUBECONFIG={{kubeconfig}}
      cd {{archive_dir}}/bmo/
      make deploy
    when: bmo_install.stdout|int == 0

  - name: Check install
    shell: |
      export KUBECONFIG={{kubeconfig}}
      kubectl get pods -A | grep benchmark-operator | wc -l
    register: bmo_check

  - fail:
      msg: "benchmark-operator failed to install"
    when: bmo_check.stdout|int == 0

  tags: benchmark-operator

#
# Using cloud-bullzozer/performance-dashboards
# Render dashboards
# Install grafana/dashboards with the default k8s-deploy, openshift will be different
# -- Optional for CI, as we will scrap Prometheus.
#
- block:

  - name: Build Grafana manifests (Performance)
    shell: |
      export KUBECONFIG={{kubeconfig}}
      git clone http://github.com/cloud-bulldozer/performance-dashboards/ {{archive_dir}}/dashboards
      cd {{archive_dir}}/dashboards
      make

  - name: Generate dittybopper manifest file
    template:
      src: k8s-dittybopper.yaml.template.j2
      dest: "{{archive_dir}}/dashboards/dittybopper/templates/k8s-dittybopper.yaml.template"

  - name: Deploy Grafana
    shell: |
      export KUBECONFIG={{kubeconfig}}
      cd {{archive_dir}}/dashboards/dittybopper
      ./k8s-deploy.sh

  tags:
    - grafana
